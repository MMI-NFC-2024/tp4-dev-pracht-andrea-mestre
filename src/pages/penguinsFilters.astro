---
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <h1 class="text-2xl">
        Test Astro et Plot (Observablehq) - Filtres Avancés
    </h1>
    
    <!-- Conteneur des filtres -->
    <div class="filters-container mb-6 p-4 bg-gray-50 rounded-lg">
        <h2 class="text-lg font-semibold mb-4">Filtres de données</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Filtre par espèce -->
            <div>
                <label for="species-select" class="block text-sm font-medium mb-2">
                    Espèce :
                </label>
                <select id="species-select" class="w-full border border-gray-300 rounded px-3 py-2">
                    <option value="all">Toutes les espèces</option>
                    <option value="Adelie">Adelie</option>
                    <option value="Chinstrap">Chinstrap</option>
                    <option value="Gentoo">Gentoo</option>
                </select>
            </div>
            
            <!-- Filtre par île -->
            <div>
                <label for="island-select" class="block text-sm font-medium mb-2">
                    Île :
                </label>
                <select id="island-select" class="w-full border border-gray-300 rounded px-3 py-2">
                    <option value="all">Toutes les îles</option>
                    <option value="Biscoe">Biscoe</option>
                    <option value="Dream">Dream</option>
                    <option value="Torgersen">Torgersen</option>
                </select>
            </div>
            
            <!-- Filtre par sexe -->
            <div>
                <label for="sex-select" class="block text-sm font-medium mb-2">
                    Sexe :
                </label>
                <select id="sex-select" class="w-full border border-gray-300 rounded px-3 py-2">
                    <option value="all">Tous</option>
                    <option value="MALE">Mâle</option>
                    <option value="FEMALE">Femelle</option>
                </select>
            </div>
        </div>
        
        <!-- Bouton de réinitialisation -->
        <div class="mt-4">
            <button id="reset-filters" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors">
                Réinitialiser les filtres
            </button>
        </div>
    </div>

    <div id="myplot"></div>

    <script>
        import * as Plot from "@observablehq/plot";
        import penguins from "../assets/penguins.json";

        // Récupération de tous les éléments select
        const selectSpecies = document.getElementById("species-select") as HTMLSelectElement;
        const selectIsland = document.getElementById("island-select") as HTMLSelectElement;
        const selectSex = document.getElementById("sex-select") as HTMLSelectElement;
        const resetButton = document.getElementById("reset-filters") as HTMLButtonElement;

        function renderPlot() {
            const species = selectSpecies?.value || "all";
            const island = selectIsland?.value || "all";
            const sex = selectSex?.value || "all";
            const plotDiv = document.getElementById("myplot");

            if (!plotDiv) return;

            plotDiv.innerHTML = "";

            // Filtrage combiné des données
            let filteredData = penguins.filter((d) => {
                // Filtrer les données avec des valeurs nulles
                if (!d.culmen_length_mm || !d.culmen_depth_mm || !d.species || !d.island || !d.sex) {
                    return false;
                }

                // Appliquer les filtres
                const speciesMatch = species === "all" || d.species === species;
                const islandMatch = island === "all" || d.island === island;
                const sexMatch = sex === "all" || d.sex === sex;

                return speciesMatch && islandMatch && sexMatch;
            });

            // Afficher le nombre de résultats
            updateResultsCount(filteredData.length);

            const plot = Plot.plot({
                marks: [
                    Plot.dot(filteredData, {
                        x: "culmen_length_mm",
                        y: "culmen_depth_mm",
                        stroke: "species",
                        fill: "island",
                        fillOpacity: 0.7,
                        r: 4
                    }),
                ],
                marginLeft: 70,
                marginBottom: 70,
                width: 800,
                height: 500,
                x: {
                    label: "Longueur du bec (mm)",
                    grid: true
                },
                y: {
                    label: "Profondeur du bec (mm)",
                    grid: true
                },
                color: {
                    legend: true,
                    label: "Espèce"
                },
                symbol: {
                    legend: true,
                    label: "Île"
                }
            });
            plotDiv.appendChild(plot);
        }

        function updateResultsCount(count: number) {
            let countElement = document.getElementById("results-count");
            if (!countElement) {
                countElement = document.createElement("p");
                countElement.id = "results-count";
                countElement.className = "text-sm text-gray-600 mb-4";
                const plotDiv = document.getElementById("myplot");
                plotDiv?.parentNode?.insertBefore(countElement, plotDiv);
            }
            countElement.textContent = `Nombre de pingouins affichés : ${count}`;
        }

        function resetFilters() {
            if (selectSpecies) selectSpecies.value = "all";
            if (selectIsland) selectIsland.value = "all";
            if (selectSex) selectSex.value = "all";
            renderPlot();
        }

        // Ajout des écouteurs d'événements
        if (selectSpecies) {
            selectSpecies.addEventListener("change", renderPlot);
        }
        if (selectIsland) {
            selectIsland.addEventListener("change", renderPlot);
        }
        if (selectSex) {
            selectSex.addEventListener("change", renderPlot);
        }
        if (resetButton) {
            resetButton.addEventListener("click", resetFilters);
        }

        // Affichage initial
        renderPlot();
    </script>

    <style>
        .filters-container {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        select {
            transition: border-color 0.3s ease;
        }
        
        select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        #myplot {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 500px;
        }
        
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            #myplot svg {
                max-width: 100%;
                height: auto;
            }
        }
    </style>
</Layout>
